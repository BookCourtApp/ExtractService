// <auto-generated />
using System;
using InfrastructureProject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InfrastructureProject.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("Core.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Author")
                        .HasColumnType("TEXT");

                    b.Property<string>("Breadcrumbs")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Genre")
                        .HasColumnType("TEXT");

                    b.Property<string>("ISBN")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NumberOfPages")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ParsingDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PublisherYear")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SiteBookId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Core.Models.Error", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ExtractorResultId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ExtractorResultId");

                    b.ToTable("Errors");
                });

            modelBuilder.Entity("Core.Models.ExtractorResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AverageBookProcessing")
                        .HasColumnType("TEXT");

                    b.Property<int>("ExtractorDataCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeOfCompletion")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ExtractorResults");
                });

            modelBuilder.Entity("Core.Models.User", b =>
                {
                    b.Property<string>("UserLogin")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ActivityIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReadingDevices")
                        .HasColumnType("TEXT");

                    b.Property<string>("RegistrationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sex")
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserLink")
                        .HasColumnType("TEXT");

                    b.HasKey("UserLogin");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Core.Models.UserPreference", b =>
                {
                    b.Property<string>("UserLogin")
                        .HasColumnType("TEXT");

                    b.Property<string>("LinkBook")
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PreferenceType")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserEvaluationBook")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserEvaluationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserLink")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserLogin", "LinkBook", "SiteName", "PreferenceType");

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("Core.Models.Error", b =>
                {
                    b.HasOne("Core.Models.ExtractorResult", null)
                        .WithMany("Errors")
                        .HasForeignKey("ExtractorResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.ExtractorResult", b =>
                {
                    b.Navigation("Errors");
                });
#pragma warning restore 612, 618
        }
    }
}
